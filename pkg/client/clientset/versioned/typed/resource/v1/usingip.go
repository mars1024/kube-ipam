/*
Copyright 2019 2019 Bruce Ma

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/mars1024/kube-ipam/pkg/apis/resource/v1"
	scheme "github.com/mars1024/kube-ipam/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// UsingIPsGetter has a method to return a UsingIPInterface.
// A group's client should implement this interface.
type UsingIPsGetter interface {
	UsingIPs() UsingIPInterface
}

// UsingIPInterface has methods to work with UsingIP resources.
type UsingIPInterface interface {
	Create(*v1.UsingIP) (*v1.UsingIP, error)
	Update(*v1.UsingIP) (*v1.UsingIP, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.UsingIP, error)
	List(opts metav1.ListOptions) (*v1.UsingIPList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.UsingIP, err error)
	UsingIPExpansion
}

// usingIPs implements UsingIPInterface
type usingIPs struct {
	client rest.Interface
}

// newUsingIPs returns a UsingIPs
func newUsingIPs(c *ResourceV1Client) *usingIPs {
	return &usingIPs{
		client: c.RESTClient(),
	}
}

// Get takes name of the usingIP, and returns the corresponding usingIP object, and an error if there is any.
func (c *usingIPs) Get(name string, options metav1.GetOptions) (result *v1.UsingIP, err error) {
	result = &v1.UsingIP{}
	err = c.client.Get().
		Resource("usingips").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of UsingIPs that match those selectors.
func (c *usingIPs) List(opts metav1.ListOptions) (result *v1.UsingIPList, err error) {
	result = &v1.UsingIPList{}
	err = c.client.Get().
		Resource("usingips").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested usingIPs.
func (c *usingIPs) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("usingips").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a usingIP and creates it.  Returns the server's representation of the usingIP, and an error, if there is any.
func (c *usingIPs) Create(usingIP *v1.UsingIP) (result *v1.UsingIP, err error) {
	result = &v1.UsingIP{}
	err = c.client.Post().
		Resource("usingips").
		Body(usingIP).
		Do().
		Into(result)
	return
}

// Update takes the representation of a usingIP and updates it. Returns the server's representation of the usingIP, and an error, if there is any.
func (c *usingIPs) Update(usingIP *v1.UsingIP) (result *v1.UsingIP, err error) {
	result = &v1.UsingIP{}
	err = c.client.Put().
		Resource("usingips").
		Name(usingIP.Name).
		Body(usingIP).
		Do().
		Into(result)
	return
}

// Delete takes name of the usingIP and deletes it. Returns an error if one occurs.
func (c *usingIPs) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("usingips").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *usingIPs) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Resource("usingips").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched usingIP.
func (c *usingIPs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.UsingIP, err error) {
	result = &v1.UsingIP{}
	err = c.client.Patch(pt).
		Resource("usingips").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
