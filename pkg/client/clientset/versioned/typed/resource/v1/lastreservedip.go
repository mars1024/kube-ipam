/*
Copyright 2019 2019 Bruce Ma

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/mars1024/kube-ipam/pkg/apis/resource/v1"
	scheme "github.com/mars1024/kube-ipam/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// LastReservedIPsGetter has a method to return a LastReservedIPInterface.
// A group's client should implement this interface.
type LastReservedIPsGetter interface {
	LastReservedIPs() LastReservedIPInterface
}

// LastReservedIPInterface has methods to work with LastReservedIP resources.
type LastReservedIPInterface interface {
	Create(*v1.LastReservedIP) (*v1.LastReservedIP, error)
	Update(*v1.LastReservedIP) (*v1.LastReservedIP, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.LastReservedIP, error)
	List(opts metav1.ListOptions) (*v1.LastReservedIPList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.LastReservedIP, err error)
	LastReservedIPExpansion
}

// lastReservedIPs implements LastReservedIPInterface
type lastReservedIPs struct {
	client rest.Interface
}

// newLastReservedIPs returns a LastReservedIPs
func newLastReservedIPs(c *ResourceV1Client) *lastReservedIPs {
	return &lastReservedIPs{
		client: c.RESTClient(),
	}
}

// Get takes name of the lastReservedIP, and returns the corresponding lastReservedIP object, and an error if there is any.
func (c *lastReservedIPs) Get(name string, options metav1.GetOptions) (result *v1.LastReservedIP, err error) {
	result = &v1.LastReservedIP{}
	err = c.client.Get().
		Resource("lastreservedips").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of LastReservedIPs that match those selectors.
func (c *lastReservedIPs) List(opts metav1.ListOptions) (result *v1.LastReservedIPList, err error) {
	result = &v1.LastReservedIPList{}
	err = c.client.Get().
		Resource("lastreservedips").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested lastReservedIPs.
func (c *lastReservedIPs) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("lastreservedips").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a lastReservedIP and creates it.  Returns the server's representation of the lastReservedIP, and an error, if there is any.
func (c *lastReservedIPs) Create(lastReservedIP *v1.LastReservedIP) (result *v1.LastReservedIP, err error) {
	result = &v1.LastReservedIP{}
	err = c.client.Post().
		Resource("lastreservedips").
		Body(lastReservedIP).
		Do().
		Into(result)
	return
}

// Update takes the representation of a lastReservedIP and updates it. Returns the server's representation of the lastReservedIP, and an error, if there is any.
func (c *lastReservedIPs) Update(lastReservedIP *v1.LastReservedIP) (result *v1.LastReservedIP, err error) {
	result = &v1.LastReservedIP{}
	err = c.client.Put().
		Resource("lastreservedips").
		Name(lastReservedIP.Name).
		Body(lastReservedIP).
		Do().
		Into(result)
	return
}

// Delete takes name of the lastReservedIP and deletes it. Returns an error if one occurs.
func (c *lastReservedIPs) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("lastreservedips").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *lastReservedIPs) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Resource("lastreservedips").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched lastReservedIP.
func (c *lastReservedIPs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.LastReservedIP, err error) {
	result = &v1.LastReservedIP{}
	err = c.client.Patch(pt).
		Resource("lastreservedips").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
